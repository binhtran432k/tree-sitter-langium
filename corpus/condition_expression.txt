================================================================================
disjunction
================================================================================
Hello: <a | b> 'hello';
Hello: <a | b | c> 'hello';
--------------------------------------------------------------------------------

(document
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (disjunction_expression
        (parameter_reference)
        (parameter_reference))
      (keyword)))
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (disjunction_expression
        (disjunction_expression
          (parameter_reference)
          (parameter_reference))
        (parameter_reference))
      (keyword))))

================================================================================
conjunction
================================================================================
Hello: <a & b> 'hello';
Hello: <a & b & c> 'hello';
--------------------------------------------------------------------------------

(document
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (conjunction_expression
        (parameter_reference)
        (parameter_reference))
      (keyword)))
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (conjunction_expression
        (conjunction_expression
          (parameter_reference)
          (parameter_reference))
        (parameter_reference))
      (keyword))))

================================================================================
negation
================================================================================
Hello: <!a> 'hello';
Hello: <!!a> 'hello';
--------------------------------------------------------------------------------

(document
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (negation_expression
        (parameter_reference))
      (keyword)))
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (negation_expression
        (negation_expression
          (parameter_reference)))
      (keyword))))

================================================================================
atom parameter reference
================================================================================
Hello: <a> 'hello';
--------------------------------------------------------------------------------

(document
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (parameter_reference)
      (keyword))))

================================================================================
atom parenthesized condition
================================================================================
Hello: <(a)> 'hello';
--------------------------------------------------------------------------------

(document
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (parenthesized_condition_expression
        (parameter_reference))
      (keyword))))

================================================================================
atom boolean literal
================================================================================
Hello: <true> 'hello';
--------------------------------------------------------------------------------

(document
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (boolean_literal)
      (keyword))))

================================================================================
complex condition
================================================================================
Hello: <a | b | !!true> 'hello';
Hello: <a | b & c | true> 'hello';
Hello: <a & b | c & true> 'hello';
Hello: <a & (b | c) & true> 'hello';
--------------------------------------------------------------------------------

(document
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (disjunction_expression
        (disjunction_expression
          (parameter_reference)
          (parameter_reference))
        (negation_expression
          (negation_expression
            (boolean_literal))))
      (keyword)))
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (disjunction_expression
        (disjunction_expression
          (parameter_reference)
          (conjunction_expression
            (parameter_reference)
            (parameter_reference)))
        (boolean_literal))
      (keyword)))
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (disjunction_expression
        (conjunction_expression
          (parameter_reference)
          (parameter_reference))
        (conjunction_expression
          (parameter_reference)
          (boolean_literal)))
      (keyword)))
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (conjunction_expression
        (conjunction_expression
          (parameter_reference)
          (parenthesized_condition_expression
            (disjunction_expression
              (parameter_reference)
              (parameter_reference))))
        (boolean_literal))
      (keyword))))
