================================================================================
disjunction
================================================================================
Hello: <a | b> 'hello';
Hello: <a | b | c> 'hello';
--------------------------------------------------------------------------------

(document
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (disjunction_expression
        (parameter_reference_expression
          (id))
        (parameter_reference_expression
          (id)))
      (cardinality_expression
        (keyword_expression
          (string)))))
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (disjunction_expression
        (disjunction_expression
          (parameter_reference_expression
            (id))
          (parameter_reference_expression
            (id)))
        (parameter_reference_expression
          (id)))
      (cardinality_expression
        (keyword_expression
          (string))))))

================================================================================
conjunction
================================================================================
Hello: <a & b> 'hello';
Hello: <a & b & c> 'hello';
--------------------------------------------------------------------------------

(document
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (conjunction_expression
        (parameter_reference_expression
          (id))
        (parameter_reference_expression
          (id)))
      (cardinality_expression
        (keyword_expression
          (string)))))
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (conjunction_expression
        (conjunction_expression
          (parameter_reference_expression
            (id))
          (parameter_reference_expression
            (id)))
        (parameter_reference_expression
          (id)))
      (cardinality_expression
        (keyword_expression
          (string))))))

================================================================================
negation
================================================================================
Hello: <!a> 'hello';
Hello: <!!a> 'hello';
--------------------------------------------------------------------------------

(document
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (negation_expression
        (parameter_reference_expression
          (id)))
      (cardinality_expression
        (keyword_expression
          (string)))))
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (negation_expression
        (negation_expression
          (parameter_reference_expression
            (id))))
      (cardinality_expression
        (keyword_expression
          (string))))))

================================================================================
atom parameter reference
================================================================================
Hello: <a> 'hello';
--------------------------------------------------------------------------------

(document
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (parameter_reference_expression
        (id))
      (cardinality_expression
        (keyword_expression
          (string))))))

================================================================================
atom parenthesized condition
================================================================================
Hello: <(a)> 'hello';
--------------------------------------------------------------------------------

(document
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (parenthesized_condition_expression
        (parameter_reference_expression
          (id)))
      (cardinality_expression
        (keyword_expression
          (string))))))

================================================================================
atom boolean literal
================================================================================
Hello: <true> 'hello';
--------------------------------------------------------------------------------

(document
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (boolean_literal)
      (cardinality_expression
        (keyword_expression
          (string))))))

================================================================================
complex condition
================================================================================
Hello: <a | b | !!true> 'hello';
Hello: <a | b & c | true> 'hello';
Hello: <a & b | c & true> 'hello';
Hello: <a & (b | c) & true> 'hello';
--------------------------------------------------------------------------------

(document
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (disjunction_expression
        (disjunction_expression
          (parameter_reference_expression
            (id))
          (parameter_reference_expression
            (id)))
        (negation_expression
          (negation_expression
            (boolean_literal))))
      (cardinality_expression
        (keyword_expression
          (string)))))
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (disjunction_expression
        (disjunction_expression
          (parameter_reference_expression
            (id))
          (conjunction_expression
            (parameter_reference_expression
              (id))
            (parameter_reference_expression
              (id))))
        (boolean_literal))
      (cardinality_expression
        (keyword_expression
          (string)))))
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (disjunction_expression
        (conjunction_expression
          (parameter_reference_expression
            (id))
          (parameter_reference_expression
            (id)))
        (conjunction_expression
          (parameter_reference_expression
            (id))
          (boolean_literal)))
      (cardinality_expression
        (keyword_expression
          (string)))))
  (parser_rule_statement
    (rule_name_expression
      (id))
    (conditional_branch_expression
      (conjunction_expression
        (conjunction_expression
          (parameter_reference_expression
            (id))
          (parenthesized_condition_expression
            (disjunction_expression
              (parameter_reference_expression
                (id))
              (parameter_reference_expression
                (id)))))
        (boolean_literal))
      (cardinality_expression
        (keyword_expression
          (string))))))
